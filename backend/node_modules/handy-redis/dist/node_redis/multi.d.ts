import * as nodeRedis from "redis";
import { Commands } from "../generated/interface";
import { Push } from "../type-util";
export declare type ResultType<K extends keyof Commands> = ReturnType<Commands[K]> extends Promise<infer X> ? X : never;
export declare const WrappedNodeRedisMultiImpl: {
    new (multi: nodeRedis.Multi): {
        readonly nodeRedisMulti: nodeRedis.Multi;
        readonly exec: WrappedNodeRedisMulti["exec"];
        readonly exec_atomic: WrappedNodeRedisMulti["exec_atomic"];
    };
    create(multi: nodeRedis.Multi): WrappedNodeRedisMulti;
};
export declare type WrappedNodeRedisMulti<Results extends unknown[] = []> = {
    [K in Exclude<keyof Commands, "exec" | "exec_atomic">]: (...args: Parameters<Commands[K]>) => WrappedNodeRedisMulti<Push<Results, ResultType<K> | nodeRedis.ReplyError>>;
} & {
    exec: () => Promise<Results>;
    exec_atomic: () => Promise<Results>;
};
