[{"C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\index.js":"1","C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\App.js":"2","C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Chat\\Chat.js":"3","C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Header\\Header.js":"4","C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Login\\Login.js":"5","C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Chat\\Messages\\Messages.js":"6","C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Chat\\Input\\Input.js":"7"},{"size":271,"mtime":1607530046109,"results":"8","hashOfConfig":"9"},{"size":1100,"mtime":1607598642403,"results":"10","hashOfConfig":"9"},{"size":5681,"mtime":1607691481569,"results":"11","hashOfConfig":"9"},{"size":329,"mtime":1607524301174,"results":"12","hashOfConfig":"9"},{"size":2053,"mtime":1607524949027,"results":"13","hashOfConfig":"9"},{"size":1956,"mtime":1607688424710,"results":"14","hashOfConfig":"9"},{"size":1605,"mtime":1607626300787,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"17lyrdz",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\index.js",[],["34","35"],"C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\App.js",[],"C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Chat\\Chat.js",["36"],"import React, { useEffect, useReducer, useState } from \"react\";\r\nimport Messages from './Messages/Messages';\r\nimport Input from './Input/Input';\r\nimport socketIOClient from 'socket.io-client';\r\nimport crypto from 'crypto';\r\nimport { AvatarGenerator } from 'random-avatar-generator';\r\nimport moment from 'moment'\r\n\r\n\r\n\r\nconst reducer = (state, action) => {\r\n  if(action.type === 'MEMBER_VALUE'){\r\n    const memberData ={ username: action.payload.username, avatarUrl: action.payload.avatarUrl};\r\n    return{\r\n      ...state,\r\n      member: memberData,\r\n    }\r\n  }\r\n  if(action.type === 'DELETE_MSG'){\r\n    return{\r\n      ...state,\r\n      messages: []\r\n    }\r\n  }\r\n  if(action.type === 'ADD_MSG'){\r\n    const msgData = [...state.messages , action.payload]\r\n    return{\r\n      ...state,\r\n      messages: msgData,\r\n    }\r\n  }\r\n  if(action.type === 'DECRYPTION'){\r\n    return{\r\n      ...state,\r\n      messages: action.payload\r\n    }\r\n  }\r\n  \r\n  return state;\r\n}\r\n\r\nlet socket;\r\n\r\nconst initSocket = async (roomName) => {\r\n  socket = await socketIOClient('http://localhost:3001',{query:`roomName=${roomName}`})\r\n}\r\n\r\n\r\n\r\nconst Chat = (props) => {\r\n\r\n  const defaultState = {\r\n    messages: [],\r\n    member: {\r\n      username:'',\r\n      avatarUrl: '',\r\n    },\r\n    qrCodesForCrypto: []\r\n  }\r\n    const [qrCode, setQrCode] = useState('');\r\n    const [publicKey, setPublicKey] = useState('');\r\n    const [onlineUsers, setOnlineUsers] = useState(0)\r\n    const [state, dispach] = useReducer(reducer, defaultState);\r\n\r\n    useEffect(() => {\r\n      const generator = new AvatarGenerator();\r\n      const avatarUrl = generator.generateRandomAvatar();\r\n      const memberData = { username: props.username, avatarUrl: avatarUrl}\r\n      dispach({type:'MEMBER_VALUE', payload: memberData});\r\n      initSocket(props.roomName).then(() => {\r\n        handleSocket()\r\n      })\r\n    }, [])\r\n\r\n      const onSendMessage = (msg) => {\r\n        const date = Date.now()\r\n        const msgForSend = {\r\n          text: msg,\r\n          member: state.member,\r\n          dateOfSend: moment(date).format('DD MMMM YYYY')\r\n        }\r\n        encryptMessageAndSend(msg);\r\n        dispach({type:'ADD_MSG', payload: msgForSend});\r\n      }\r\n\r\n      const encryptMessageAndSend = (msg) => {\r\n        const encryptedMsgText = crypto.publicEncrypt(publicKey, Buffer.from(msg));\r\n        const encryptedUsername = crypto.publicEncrypt(publicKey, Buffer.from(state.member.username))\r\n        const msgToEmit = {text: encryptedMsgText.toString('base64'), \r\n        member: {\r\n          username: encryptedUsername.toString('base64'),\r\n          avatarUrl: state.member.avatarUrl\r\n        }}\r\n        socket.emit('send-chat-message', msgToEmit)\r\n      }\r\n      const handleSocket = () => {\r\n          socket.on('chat-message',(msg) => {\r\n            const encryptedMsg = decryptMessage(msg)\r\n            dispach({type:'ADD_MSG', payload: encryptedMsg})\r\n          })\r\n\r\n          socket.on('users-count',(usersCount) => {\r\n            const newCount = usersCount\r\n            setOnlineUsers(newCount);\r\n          })\r\n          \r\n          socket.on('qr-code', (qrCodeWithKey) => {\r\n           setQrCode(qrCodeWithKey.privateKey)\r\n           setPublicKey(qrCodeWithKey.publicKey)\r\n          })\r\n\r\n          socket.on('chat-history',(chatMsg) => {\r\n            chatMsg.forEach(msg => {\r\n              dispach({type:'ADD_MSG', payload: msg})\r\n            })\r\n          })\r\n\r\n          socket.on('chat-delete', () => {\r\n            dispach({type:'DELETE_MSG',payload: null})\r\n          })\r\n        \r\n      }\r\n\r\n      const onKeyAdd= (privateKey) => {\r\n        if(!state.qrCodesForCrypto.includes(privateKey)){\r\n        state.qrCodesForCrypto.push(privateKey);\r\n        }\r\n        tryDecrypt();\r\n      }\r\n\r\n      const tryDecrypt = () => {\r\n        const decryptedMessages = [];\r\n        state.messages.forEach(message => {\r\n          if(message.member.username === state.member.username){\r\n            decryptedMessages.push(message);\r\n          }\r\n          else{\r\n          const encryptedMsg = decryptMessage(message);\r\n          encryptedMsg ?  decryptedMessages.push(encryptedMsg) : decryptedMessages.push(message);\r\n          }\r\n          \r\n        })\r\n        dispach({type: 'DECRYPTION', payload: decryptedMessages});\r\n      }\r\n\r\n      const decryptMessage = (msg) => {\r\n        const qrKeys = [...state.qrCodesForCrypto];\r\n        console.log(qrKeys);\r\n        let encryptedMessage = msg;\r\n        for(const code of qrKeys){\r\n          try{\r\n              const encryptedMsg = crypto.privateDecrypt(code, Buffer.from(msg.text,'base64'));\r\n              const encryptedUsername = crypto.privateDecrypt(code, Buffer.from(msg.member.username,'base64'));\r\n              let message = msg;\r\n              message.text = encryptedMsg.toString(\"utf8\");\r\n              message.member.username  = encryptedUsername.toString(\"utf8\");\r\n              encryptedMessage = message\r\n          }\r\n          catch(err){\r\n            continue\r\n          }\r\n        }\r\n        return encryptedMessage;\r\n      }\r\n\r\n      const onMsgDeleteRequest = () => {\r\n        dispach({type:'DELETE_MSG',payload: null})\r\n        socket.emit('delete-messages');\r\n      }\r\n\r\n      return(\r\n        <div>\r\n        <div class=\"ibox-content\">\r\n          <Messages\r\n            messages={state.messages}\r\n            currentMember={state.member}\r\n            code={qrCode}\r\n            deleteHistory={onMsgDeleteRequest}\r\n            onlineUsers={onlineUsers}\r\n          />\r\n          <Input\r\n              onSendMessage={onSendMessage}\r\n              onKeyAdd={onKeyAdd}\r\n          />\r\n        </div>\r\n        </div>\r\n      )\r\n  }\r\n\r\n  \r\nexport default Chat;\r\n\r\n\r\n","C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Header\\Header.js",[],"C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Login\\Login.js",[],"C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Chat\\Messages\\Messages.js",[],"C:\\Users\\Grześ\\Desktop\\projekt\\frontend\\src\\Chat\\Input\\Input.js",["37"],"import React, {useState} from \"react\";\r\n\r\n\r\nconst useLogicForInput = ({onSendMessage, onKeyAdd})=>{\r\n  const [text, setMsgText] = useState('');\r\n  const [key, setKey] = useState('');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSendMessage(text);\r\n    setMsgText('');\r\n  }\r\n\r\n  const handleKeySubmit =(e) => {\r\n    e.preventDefault();\r\n    onKeyAdd(key);\r\n    setKey('');\r\n  }\r\n\r\n  return {\r\n    text, setMsgText,\r\n    key, setKey,\r\n    handleSubmit, handleKeySubmit\r\n  }\r\n\r\n}\r\n\r\nconst Input = (props) => {\r\n  const {\r\n    text, setMsgText,\r\n    key, setKey,\r\n    handleSubmit, handleKeySubmit\r\n  } = useLogicForInput(props)\r\n \r\n    return (\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-8\">\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n              onChange={(e) => setMsgText(e.target.value)}\r\n              value={text}\r\n              type=\"text\"\r\n              maxLength=\"40\"\r\n              placeholder=\"Enter your message and press ENTER\"\r\n              autoFocus=\"true\"\r\n            />\r\n          </form>\r\n          </div>\r\n          <div class=\"col-lg-8\">\r\n          <form onSubmit={handleKeySubmit}>\r\n            <textarea rows=\"1\" cols=\"132\"\r\n              onChange={(e) => setKey(e.target.value)}\r\n              value={key}\r\n              type=\"text\"\r\n              placeholder=\"Enter your friend key and click button!\"\r\n              autoFocus=\"false\"\r\n            />\r\n            <button type=\"button\" class=\"btn btn-dark\" type=\"submit\">Add qr key</button>\r\n          </form>\r\n          </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Input;\r\n",["38","39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":73,"column":8,"nodeType":"46","endLine":73,"endColumn":10,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":58,"column":56,"nodeType":"50","endLine":58,"endColumn":69},{"ruleId":"40","replacedBy":"51"},{"ruleId":"42","replacedBy":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleSocket', 'props.roomName', and 'props.username'. Either include them or remove the dependency array.","ArrayExpression",["55"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["53"],["54"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [handleSocket, props.roomName, props.username]",{"range":"58","text":"59"},[1860,1862],"[handleSocket, props.roomName, props.username]"]